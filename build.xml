<project default="compile">
<!--
 build.xml for Password.java
		build from old projects, we started this project from scratch, non of this is relevant 
		use eclipse instead of ANT and build.xml
       original author: P.Conrad for CS56, W11
       updated Weihan Wang for github W14
       updated again by Troy Larson for W16
       updated again by Sunimal E and Jun for M16(now tests can be run from anywhere)
-->
<property environment="env"/>
<!-- load the environment variables -->
<property name="webRoot" value="${env.HOME}/public_html/"/>
<property name="webBaseUrl" value="http://www.cs.ucsb.edu/~${env.USER}/"/>
<property name="course" value="cs56"/>
<property name="quarter" value="M16"/>
<property name="issueNum" value="0000042"/>
<property name="mainClass" value="PasswordGUI"/>
<property name="projectName" value="${course}_${quarter}_${issueNum}"/>
<property name="projectPath" value="${course}/${quarter}/issues/${issueNum}"/>
<property name="javadocDest" value="/cs/student/peng00/cs56/javadoc_password"/>
<property name="javadocURL" value="${webBaseUrl}/${projectPath}/javadoc"/>

<path id="project.class.path">
         <pathelement location="build"/>
         <pathelement location="lib/junit-4.8.2.jar"/>
</path>



<target name="compile" description="Compiles the .java files in /src and puts the compiled .class files in /build">
  
  <mkdir dir="build"/>

  <javac srcdir="src" destdir="build" debug="true" debuglevel="lines,source" includeantruntime="false">

    <classpath refid="project.class.path"/>

  </javac>

</target>



<target name="run" depends="compile" description="Runs the Password Generator Program">

  <java classname="${mainClass}" classpath="build" fork="true" >
  </java>

</target>


<target name="run-cl" depends="compile" description="Runs the Password Generator Program in Command Line mode">

  <java classname="${mainClass}" classpath="build" >
    <arg value="-cl"/>
  </java>

</target>


<target name="clean" description="Cleans the project by deleting the files in /build and /javadoc">

  <delete failonerror="false" verbose="true">
    <fileset dir="build" includes="*.class"/>
  </delete>

  <delete dir="javadoc" quiet="true"/>

</target>



<target name="test" depends="compile" description="Runs all tests by compiling and running the .java files that end in Test">

  <junit haltonerror="no" haltonfailure="no">

    <classpath refid="project.class.path"/>

    <batchtest fork="yes">
      <fileset dir="src">
	<!--
	    this will pick up every class with a name ending in Test 
	-->
	<include name="TestPasswordGenerator.java"/>
      </fileset>
    </batchtest>
    
    <formatter type="plain" usefile="false"/>
    
  </junit>
</target>



<target name="javadoc" depends="compile" description="Makes a javadoc and saves it to a directory under the users's public_html folder">
  
  <delete dir="javadoc" quiet="true"/>

  <javadoc destdir="javadoc" author="true" version="true" use="true">
    <fileset dir="src" includes="**/*.java"/>
    <classpath refid="project.class.path"/>
  </javadoc>
  
  <!-- delete the old javadoc -->
  <delete quiet="true" dir="${javadocDest}"/>

  <!--
      copy everything you just made to the javadoc destination, and then make it readable 
  -->
  <copy todir="${javadocDest}">
    <fileset dir="javadoc"/>
  </copy>

  <!--
      Note: this only does the chmod command on the 
      javadoc subdirectory and its contents.  You MIGHT have to
      MANUALLY do the chmod on the parent directories.  However,
      you should only need to do that once. 
  -->
  <chmod dir="${javadocDest}" perm="755" type="dir" includes="**"/>
  <chmod dir="${javadocDest}" perm="755" type="file" includes="**/*"/>
  <echo>Javadoc deployed to ${javadocURL}</echo>
  
</target>



</project>


