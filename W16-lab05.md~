Lab 05
This program is a random password generator where the user can enter a minimum and maximum character count, in addition to any special characters they want included.

As a user, I can generate a password of random characters that cannot be guessed so I can keep my data secure elsewhere.
As a user, I can specify the minimum and maximum number of characters my password can be so it can fit the specific restraints of the website I am making my password for.
As a user, I can specify certain special characters the password can have (i.e. '&' '*' '$') so I can generate the most secure password possible.
The program runs! The user specifies a upper and lower bounds for the number of characters they want in their password as well as any special characters they want to include. Based on these parameters, a password is generated (assuming the parameters are “good” –– the program crashes in certain cases).

As a user, I want to be able to specify more specific password constraints to fill the requirements of the website I am making a password for.
As a user, I want to learn about what makes a good password so I know what special characters make the best password.
As a user, I need to be able to recall/retrieve my generated passwords so I can easily be able to access my data that's protected with a generated password: generated passwords are very hard to remember.
As a user, I want this software to have a very clean user interface so I know I can trust it with generating the keys that keep my data secure.
README doesn’t specify any problems that might occur. Also doesn’t include any history on any changes that might have been made to it. It may also be helpful to add a screenshot of what the GUI is supposed to look like in the event that the GUI doesn’t appear as intended. The developer documentation and build instructions are present, but could certainly more descriptive.
The build.xml file is based on a file written by Professor Conrad. There are two main targets shown by running ant -p: run, and run2. Both of these targets have the exact same description, which unfortunately doesn’t distinguish their difference. There are many targets that don’t have descriptions: compile, clean, test, and javadoc. There should also be a “jar” target that creates a jar file out of the code and puts it in a ./dist directory. Lastly, the elements are not indented correctly, making the file very hard to read.
There are plenty of issues to work on to make it to 1000 points. None of these issues seem too difficult for us, either. These issues are clearly stated, especially the ones that are apparent just from running the program a few times.
Additional Issues:
Nothing happens when you leave the maximum and minimum fields blank or input something other than numbers.
The user interface is boring, sloppy, and rife with typos.
The maximum character limit isn’t limited itself. That is, you can put down huge maximum character limits (tens of thousands of characters) and the program will output it on that one line. Perhaps this should be prevented by the program, or maybe it’s worth keeping? If it is worth keeping, the way the program outputs long passwords needs to be changed.
Code Analysis
Password.java: Overall, the structure of the code is pretty messy. Part of code uses the type Random for generating a random password length, when Math.random() is much simpler and can be used instead. The code contradicts our intuition, in the sense that we don’t understand why the code is as complex as it is. Many lines of code don’t seem to have an obvious purpose: variables such as numMaxDigits, and methods like findSpotInString() are only a couple of examples of ambiguous code. Perhaps these variables and methods are important for generating a good password, but the documentation in both the readme and the Javadoc comments lack in reasoning for why all this code is necessary. The Javadoc comments above most methods aren’t at all descriptive, such as the comment for generate() which only says “Generates the password”, but is actually the longest method in our class. There are a bunch of random typos, even for variable names. We believe the code that generates a password (i.e. all the code in this file) could be simplified greatly, increasing efficiency and making it less prone to bugs.
PasswordGUI.java The names of the inner classes are too similar, as well as the methods within them. Additionally, these names don’t really describe what they do. For example, we have the similarly named onActionPerformed1() and onActionPerformed2() methods, which do very different things yet have almost the exact same name. There’s not enough error checking in the code, which causes a bunch of errors and issues that we will need to resolve. After all, this error checking may be better off in Password.java instead of in this file. Another thing to note is the bad GUI this code represents. Even though this isn’t a direct criticism of the code itself, it’s the code that will need to be changed in order to improve the look of the GUI.
There are no tests! Which is funny, because the build.xml file has a “test” target that compiles and runs any .java files that end in “Test.java.” This means we will have to build our own tests, which will have to check not only typical cases, but also all of the special cases we may have mentioned earlier in this paper. This includes making sure the specified special characters are included in the generated password, minimum and maximum character limits making sense, handling when parameters are left blank, et cetera. These tests will of course have to be JUnit tests that we can add to a separate file called “PasswordTest.java.”